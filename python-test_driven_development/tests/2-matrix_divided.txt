>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

#test with "normal" parameters

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

#test with matrix of unequal size

>>> matrix = [[1, 2, 3], [4, 5]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

#test with divider not being a number

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 'x')
Traceback (most recent call last):
...
TypeError: div must be a number

#test with divider being 0

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

#test with matrix with non-numbers

>>> matrix = [[1, 2, 3], [4, 5, 'x']]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats


#test with 0 parameters 

>>> matrix_divided()
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

#test with more then 2 parameters 

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 3, 5)
Traceback (most recent call last):
...
TypeError: matrix_divided() takes 2 positional arguments but 3 were given

#test with matrxi = None

>>> matrix_divided(None, 3)
Traceback (most recent call last):
...
TypeError: 'NoneType' object is not iterable

#test with unidimensinal list

>>> matrix = [1, 2, 3]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

#test with negativ divider

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, -2)
[[-0.5, -1.0, -1.5], [-2.0, -2.5, -3.0]]
